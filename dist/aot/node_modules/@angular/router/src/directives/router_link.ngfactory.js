/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from '@angular/router/src/directives/router_link';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_RouterLink = (function () {
    function Wrapper_RouterLink(p0, p1, p2) {
        this.changed = false;
        this._queryParams = import1.UNINITIALIZED;
        this._fragment = import1.UNINITIALIZED;
        this._preserveQueryParams = import1.UNINITIALIZED;
        this._preserveFragment = import1.UNINITIALIZED;
        this._routerLink = import1.UNINITIALIZED;
        this.context = new import0.RouterLink(p0, p1, p2);
    }
    Wrapper_RouterLink.prototype.check_queryParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._queryParams, currValue))) {
            this.changed = true;
            this.context.queryParams = currValue;
            this._queryParams = currValue;
        }
    };
    Wrapper_RouterLink.prototype.check_fragment = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._fragment, currValue))) {
            this.changed = true;
            this.context.fragment = currValue;
            this._fragment = currValue;
        }
    };
    Wrapper_RouterLink.prototype.check_preserveQueryParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._preserveQueryParams, currValue))) {
            this.changed = true;
            this.context.preserveQueryParams = currValue;
            this._preserveQueryParams = currValue;
        }
    };
    Wrapper_RouterLink.prototype.check_preserveFragment = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._preserveFragment, currValue))) {
            this.changed = true;
            this.context.preserveFragment = currValue;
            this._preserveFragment = currValue;
        }
    };
    Wrapper_RouterLink.prototype.check_routerLink = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._routerLink, currValue))) {
            this.changed = true;
            this.context.routerLink = currValue;
            this._routerLink = currValue;
        }
    };
    Wrapper_RouterLink.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_RouterLink;
}());
export var Wrapper_RouterLinkWithHref = (function () {
    function Wrapper_RouterLinkWithHref(p0, p1, p2) {
        this.changed = false;
        this.changes = {};
        this._target = import1.UNINITIALIZED;
        this._queryParams = import1.UNINITIALIZED;
        this._fragment = import1.UNINITIALIZED;
        this._routerLinkOptions = import1.UNINITIALIZED;
        this._preserveQueryParams = import1.UNINITIALIZED;
        this._preserveFragment = import1.UNINITIALIZED;
        this._routerLink = import1.UNINITIALIZED;
        this.context = new import0.RouterLinkWithHref(p0, p1, p2);
    }
    Wrapper_RouterLinkWithHref.prototype.check_target = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._target, currValue))) {
            this.changed = true;
            this.context.target = currValue;
            this.changes['target'] = new import1.SimpleChange(this._target, currValue);
            this._target = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_queryParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._queryParams, currValue))) {
            this.changed = true;
            this.context.queryParams = currValue;
            this.changes['queryParams'] = new import1.SimpleChange(this._queryParams, currValue);
            this._queryParams = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_fragment = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._fragment, currValue))) {
            this.changed = true;
            this.context.fragment = currValue;
            this.changes['fragment'] = new import1.SimpleChange(this._fragment, currValue);
            this._fragment = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_routerLinkOptions = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._routerLinkOptions, currValue))) {
            this.changed = true;
            this.context.routerLinkOptions = currValue;
            this.changes['routerLinkOptions'] = new import1.SimpleChange(this._routerLinkOptions, currValue);
            this._routerLinkOptions = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_preserveQueryParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._preserveQueryParams, currValue))) {
            this.changed = true;
            this.context.preserveQueryParams = currValue;
            this.changes['preserveQueryParams'] = new import1.SimpleChange(this._preserveQueryParams, currValue);
            this._preserveQueryParams = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_preserveFragment = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._preserveFragment, currValue))) {
            this.changed = true;
            this.context.preserveFragment = currValue;
            this.changes['preserveFragment'] = new import1.SimpleChange(this._preserveFragment, currValue);
            this._preserveFragment = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.check_routerLink = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._routerLink, currValue))) {
            this.changed = true;
            this.context.routerLink = currValue;
            this.changes['routerLink'] = new import1.SimpleChange(this._routerLink, currValue);
            this._routerLink = currValue;
        }
    };
    Wrapper_RouterLinkWithHref.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
        }
        return changed;
    };
    return Wrapper_RouterLinkWithHref;
}());
//# sourceMappingURL=router_link.ngfactory.js.map
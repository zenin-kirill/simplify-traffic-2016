/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/router/src/directives/router_link';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_RouterLink {
  context:import0.RouterLink;
  changed:boolean;
  /*private*/ _queryParams:any;
  /*private*/ _fragment:any;
  /*private*/ _preserveQueryParams:any;
  /*private*/ _preserveFragment:any;
  /*private*/ _routerLink:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this._queryParams = import1.UNINITIALIZED;
    this._fragment = import1.UNINITIALIZED;
    this._preserveQueryParams = import1.UNINITIALIZED;
    this._preserveFragment = import1.UNINITIALIZED;
    this._routerLink = import1.UNINITIALIZED;
    this.context = new import0.RouterLink(p0,p1,p2);
  }
  check_queryParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._queryParams,currValue))) {
      this.changed = true;
      this.context.queryParams = currValue;
      this._queryParams = currValue;
    }
  }
  check_fragment(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._fragment,currValue))) {
      this.changed = true;
      this.context.fragment = currValue;
      this._fragment = currValue;
    }
  }
  check_preserveQueryParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._preserveQueryParams,currValue))) {
      this.changed = true;
      this.context.preserveQueryParams = currValue;
      this._preserveQueryParams = currValue;
    }
  }
  check_preserveFragment(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._preserveFragment,currValue))) {
      this.changed = true;
      this.context.preserveFragment = currValue;
      this._preserveFragment = currValue;
    }
  }
  check_routerLink(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._routerLink,currValue))) {
      this.changed = true;
      this.context.routerLink = currValue;
      this._routerLink = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_RouterLinkWithHref {
  context:import0.RouterLinkWithHref;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _target:any;
  /*private*/ _queryParams:any;
  /*private*/ _fragment:any;
  /*private*/ _routerLinkOptions:any;
  /*private*/ _preserveQueryParams:any;
  /*private*/ _preserveFragment:any;
  /*private*/ _routerLink:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this.changes = {};
    this._target = import1.UNINITIALIZED;
    this._queryParams = import1.UNINITIALIZED;
    this._fragment = import1.UNINITIALIZED;
    this._routerLinkOptions = import1.UNINITIALIZED;
    this._preserveQueryParams = import1.UNINITIALIZED;
    this._preserveFragment = import1.UNINITIALIZED;
    this._routerLink = import1.UNINITIALIZED;
    this.context = new import0.RouterLinkWithHref(p0,p1,p2);
  }
  check_target(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._target,currValue))) {
      this.changed = true;
      this.context.target = currValue;
      this.changes['target'] = new import1.SimpleChange(this._target,currValue);
      this._target = currValue;
    }
  }
  check_queryParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._queryParams,currValue))) {
      this.changed = true;
      this.context.queryParams = currValue;
      this.changes['queryParams'] = new import1.SimpleChange(this._queryParams,currValue);
      this._queryParams = currValue;
    }
  }
  check_fragment(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._fragment,currValue))) {
      this.changed = true;
      this.context.fragment = currValue;
      this.changes['fragment'] = new import1.SimpleChange(this._fragment,currValue);
      this._fragment = currValue;
    }
  }
  check_routerLinkOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._routerLinkOptions,currValue))) {
      this.changed = true;
      this.context.routerLinkOptions = currValue;
      this.changes['routerLinkOptions'] = new import1.SimpleChange(this._routerLinkOptions,currValue);
      this._routerLinkOptions = currValue;
    }
  }
  check_preserveQueryParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._preserveQueryParams,currValue))) {
      this.changed = true;
      this.context.preserveQueryParams = currValue;
      this.changes['preserveQueryParams'] = new import1.SimpleChange(this._preserveQueryParams,currValue);
      this._preserveQueryParams = currValue;
    }
  }
  check_preserveFragment(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._preserveFragment,currValue))) {
      this.changed = true;
      this.context.preserveFragment = currValue;
      this.changes['preserveFragment'] = new import1.SimpleChange(this._preserveFragment,currValue);
      this._preserveFragment = currValue;
    }
  }
  check_routerLink(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._routerLink,currValue))) {
      this.changed = true;
      this.context.routerLink = currValue;
      this.changes['routerLink'] = new import1.SimpleChange(this._routerLink,currValue);
      this._routerLink = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
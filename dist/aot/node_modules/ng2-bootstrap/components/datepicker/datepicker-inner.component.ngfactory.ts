/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/datepicker/datepicker-inner.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import11 from '@angular/core/src/linker/template_ref';
import * as import12 from '@angular/common/src/directives/ng_if';
export class Wrapper_DatePickerInnerComponent {
  context:import0.DatePickerInnerComponent;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _datepickerMode:any;
  /*private*/ _startingDay:any;
  /*private*/ _yearRange:any;
  /*private*/ _minDate:any;
  /*private*/ _maxDate:any;
  /*private*/ _minMode:any;
  /*private*/ _maxMode:any;
  /*private*/ _showWeeks:any;
  /*private*/ _formatDay:any;
  /*private*/ _formatMonth:any;
  /*private*/ _formatYear:any;
  /*private*/ _formatDayHeader:any;
  /*private*/ _formatDayTitle:any;
  /*private*/ _formatMonthTitle:any;
  /*private*/ _onlyCurrentMonth:any;
  /*private*/ _shortcutPropagation:any;
  /*private*/ _customClass:any;
  /*private*/ _monthColLimit:any;
  /*private*/ _yearColLimit:any;
  /*private*/ _dateDisabled:any;
  /*private*/ _initDate:any;
  /*private*/ _activeDate:any;
  constructor() {
    this.changed = false;
    this.changes = {};
    this._datepickerMode = import1.UNINITIALIZED;
    this._startingDay = import1.UNINITIALIZED;
    this._yearRange = import1.UNINITIALIZED;
    this._minDate = import1.UNINITIALIZED;
    this._maxDate = import1.UNINITIALIZED;
    this._minMode = import1.UNINITIALIZED;
    this._maxMode = import1.UNINITIALIZED;
    this._showWeeks = import1.UNINITIALIZED;
    this._formatDay = import1.UNINITIALIZED;
    this._formatMonth = import1.UNINITIALIZED;
    this._formatYear = import1.UNINITIALIZED;
    this._formatDayHeader = import1.UNINITIALIZED;
    this._formatDayTitle = import1.UNINITIALIZED;
    this._formatMonthTitle = import1.UNINITIALIZED;
    this._onlyCurrentMonth = import1.UNINITIALIZED;
    this._shortcutPropagation = import1.UNINITIALIZED;
    this._customClass = import1.UNINITIALIZED;
    this._monthColLimit = import1.UNINITIALIZED;
    this._yearColLimit = import1.UNINITIALIZED;
    this._dateDisabled = import1.UNINITIALIZED;
    this._initDate = import1.UNINITIALIZED;
    this._activeDate = import1.UNINITIALIZED;
    this.context = new import0.DatePickerInnerComponent();
  }
  check_datepickerMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._datepickerMode,currValue))) {
      this.changed = true;
      this.context.datepickerMode = currValue;
      this.changes['datepickerMode'] = new import1.SimpleChange(this._datepickerMode,currValue);
      this._datepickerMode = currValue;
    }
  }
  check_startingDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._startingDay,currValue))) {
      this.changed = true;
      this.context.startingDay = currValue;
      this.changes['startingDay'] = new import1.SimpleChange(this._startingDay,currValue);
      this._startingDay = currValue;
    }
  }
  check_yearRange(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._yearRange,currValue))) {
      this.changed = true;
      this.context.yearRange = currValue;
      this.changes['yearRange'] = new import1.SimpleChange(this._yearRange,currValue);
      this._yearRange = currValue;
    }
  }
  check_minDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._minDate,currValue))) {
      this.changed = true;
      this.context.minDate = currValue;
      this.changes['minDate'] = new import1.SimpleChange(this._minDate,currValue);
      this._minDate = currValue;
    }
  }
  check_maxDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._maxDate,currValue))) {
      this.changed = true;
      this.context.maxDate = currValue;
      this.changes['maxDate'] = new import1.SimpleChange(this._maxDate,currValue);
      this._maxDate = currValue;
    }
  }
  check_minMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._minMode,currValue))) {
      this.changed = true;
      this.context.minMode = currValue;
      this.changes['minMode'] = new import1.SimpleChange(this._minMode,currValue);
      this._minMode = currValue;
    }
  }
  check_maxMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._maxMode,currValue))) {
      this.changed = true;
      this.context.maxMode = currValue;
      this.changes['maxMode'] = new import1.SimpleChange(this._maxMode,currValue);
      this._maxMode = currValue;
    }
  }
  check_showWeeks(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._showWeeks,currValue))) {
      this.changed = true;
      this.context.showWeeks = currValue;
      this.changes['showWeeks'] = new import1.SimpleChange(this._showWeeks,currValue);
      this._showWeeks = currValue;
    }
  }
  check_formatDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatDay,currValue))) {
      this.changed = true;
      this.context.formatDay = currValue;
      this.changes['formatDay'] = new import1.SimpleChange(this._formatDay,currValue);
      this._formatDay = currValue;
    }
  }
  check_formatMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatMonth,currValue))) {
      this.changed = true;
      this.context.formatMonth = currValue;
      this.changes['formatMonth'] = new import1.SimpleChange(this._formatMonth,currValue);
      this._formatMonth = currValue;
    }
  }
  check_formatYear(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatYear,currValue))) {
      this.changed = true;
      this.context.formatYear = currValue;
      this.changes['formatYear'] = new import1.SimpleChange(this._formatYear,currValue);
      this._formatYear = currValue;
    }
  }
  check_formatDayHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatDayHeader,currValue))) {
      this.changed = true;
      this.context.formatDayHeader = currValue;
      this.changes['formatDayHeader'] = new import1.SimpleChange(this._formatDayHeader,currValue);
      this._formatDayHeader = currValue;
    }
  }
  check_formatDayTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatDayTitle,currValue))) {
      this.changed = true;
      this.context.formatDayTitle = currValue;
      this.changes['formatDayTitle'] = new import1.SimpleChange(this._formatDayTitle,currValue);
      this._formatDayTitle = currValue;
    }
  }
  check_formatMonthTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._formatMonthTitle,currValue))) {
      this.changed = true;
      this.context.formatMonthTitle = currValue;
      this.changes['formatMonthTitle'] = new import1.SimpleChange(this._formatMonthTitle,currValue);
      this._formatMonthTitle = currValue;
    }
  }
  check_onlyCurrentMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._onlyCurrentMonth,currValue))) {
      this.changed = true;
      this.context.onlyCurrentMonth = currValue;
      this.changes['onlyCurrentMonth'] = new import1.SimpleChange(this._onlyCurrentMonth,currValue);
      this._onlyCurrentMonth = currValue;
    }
  }
  check_shortcutPropagation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._shortcutPropagation,currValue))) {
      this.changed = true;
      this.context.shortcutPropagation = currValue;
      this.changes['shortcutPropagation'] = new import1.SimpleChange(this._shortcutPropagation,currValue);
      this._shortcutPropagation = currValue;
    }
  }
  check_customClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._customClass,currValue))) {
      this.changed = true;
      this.context.customClass = currValue;
      this.changes['customClass'] = new import1.SimpleChange(this._customClass,currValue);
      this._customClass = currValue;
    }
  }
  check_monthColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._monthColLimit,currValue))) {
      this.changed = true;
      this.context.monthColLimit = currValue;
      this.changes['monthColLimit'] = new import1.SimpleChange(this._monthColLimit,currValue);
      this._monthColLimit = currValue;
    }
  }
  check_yearColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._yearColLimit,currValue))) {
      this.changed = true;
      this.context.yearColLimit = currValue;
      this.changes['yearColLimit'] = new import1.SimpleChange(this._yearColLimit,currValue);
      this._yearColLimit = currValue;
    }
  }
  check_dateDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._dateDisabled,currValue))) {
      this.changed = true;
      this.context.dateDisabled = currValue;
      this.changes['dateDisabled'] = new import1.SimpleChange(this._dateDisabled,currValue);
      this._dateDisabled = currValue;
    }
  }
  check_initDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._initDate,currValue))) {
      this.changed = true;
      this.context.initDate = currValue;
      this.changes['initDate'] = new import1.SimpleChange(this._initDate,currValue);
      this._initDate = currValue;
    }
  }
  check_activeDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._activeDate,currValue))) {
      this.changed = true;
      this.context.activeDate = currValue;
      this.changes['activeDate'] = new import1.SimpleChange(this._activeDate,currValue);
      this._activeDate = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this.changes);
        this.changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
}
var renderType_DatePickerInnerComponent_Host:import4.RenderComponentType = (null as any);
class _View_DatePickerInnerComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _DatePickerInnerComponent_0_4:Wrapper_DatePickerInnerComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DatePickerInnerComponent_Host0,renderType_DatePickerInnerComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('datepicker-inner',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_DatePickerInnerComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._DatePickerInnerComponent_0_4 = new Wrapper_DatePickerInnerComponent();
    this._appEl_0.initComponent(this._DatePickerInnerComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._DatePickerInnerComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DatePickerInnerComponent) && (0 === requestNodeIndex))) { return this._DatePickerInnerComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DatePickerInnerComponent_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_DatePickerInnerComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_DatePickerInnerComponent_Host === (null as any))) { (renderType_DatePickerInnerComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_DatePickerInnerComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const DatePickerInnerComponentNgFactory:import9.ComponentFactory<import0.DatePickerInnerComponent> = new import9.ComponentFactory<import0.DatePickerInnerComponent>('datepicker-inner',viewFactory_DatePickerInnerComponent_Host0,import0.DatePickerInnerComponent);
const styles_DatePickerInnerComponent:any[] = ([] as any[]);
var renderType_DatePickerInnerComponent:import4.RenderComponentType = (null as any);
class _View_DatePickerInnerComponent0 extends import3.AppView<import0.DatePickerInnerComponent> {
  _text_0:any;
  _anchor_1:any;
  /*private*/ _appEl_1:import5.AppElement;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import10.Wrapper_NgIf;
  _text_2:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DatePickerInnerComponent0,renderType_DatePickerInnerComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._appEl_1 = new import5.AppElement(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import11.TemplateRef_(this._appEl_1,viewFactory_DatePickerInnerComponent1);
    this._NgIf_1_6 = new import10.Wrapper_NgIf(this._appEl_1.vcRef,this._TemplateRef_1_5);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init(([] as any[]),[
      this._text_0,
      this._anchor_1,
      this._text_2
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import12.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.context.datepickerMode;
    this._NgIf_1_6.check_ngIf(currVal_0,throwOnChange,false);
    this._NgIf_1_6.detectChangesInternal(this,this._anchor_1,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_DatePickerInnerComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.DatePickerInnerComponent> {
  if ((renderType_DatePickerInnerComponent === (null as any))) { (renderType_DatePickerInnerComponent = viewUtils.createRenderComponentType('',1,import8.ViewEncapsulation.None,styles_DatePickerInnerComponent,{})); }
  return new _View_DatePickerInnerComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_DatePickerInnerComponent1 extends import3.AppView<any> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DatePickerInnerComponent1,renderType_DatePickerInnerComponent,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','well well-sm bg-faded p-a card');
    this.renderer.setElementAttribute(this._el_0,'role','application');
    this._text_1 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this.renderer.projectNodes(this._el_0,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_2 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._text_1,
      this._text_2
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
function viewFactory_DatePickerInnerComponent1(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_DatePickerInnerComponent1(viewUtils,parentInjector,declarationEl);
}
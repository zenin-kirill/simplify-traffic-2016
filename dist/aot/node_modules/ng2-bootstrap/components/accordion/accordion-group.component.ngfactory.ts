/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/accordion/accordion-group.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ng2-bootstrap/components/accordion/accordion.component';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '../../../@angular/common/src/directives/ng_class.ngfactory';
import * as import12 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import13 from '../collapse/collapse.directive.ngfactory';
import * as import14 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import15 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from '@angular/common/src/directives/ng_if';
import * as import19 from 'ng2-bootstrap/components/collapse/collapse.directive';
import * as import20 from '@angular/common/src/directives/ng_class';
import * as import21 from '@angular/core/src/security';
export class Wrapper_AccordionPanelComponent {
  context:import0.AccordionPanelComponent;
  changed:boolean;
  /*private*/ _heading:any;
  /*private*/ _panelClass:any;
  /*private*/ _isDisabled:any;
  /*private*/ _isOpen:any;
  constructor(p0:any) {
    this.changed = false;
    this._heading = import1.UNINITIALIZED;
    this._panelClass = import1.UNINITIALIZED;
    this._isDisabled = import1.UNINITIALIZED;
    this._isOpen = import1.UNINITIALIZED;
    this.context = new import0.AccordionPanelComponent(p0);
  }
  check_heading(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._heading,currValue))) {
      this.changed = true;
      this.context.heading = currValue;
      this._heading = currValue;
    }
  }
  check_panelClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._panelClass,currValue))) {
      this.changed = true;
      this.context.panelClass = currValue;
      this._panelClass = currValue;
    }
  }
  check_isDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._isDisabled,currValue))) {
      this.changed = true;
      this.context.isDisabled = currValue;
      this._isDisabled = currValue;
    }
  }
  check_isOpen(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._isOpen,currValue))) {
      this.changed = true;
      this.context.isOpen = currValue;
      this._isOpen = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
var renderType_AccordionPanelComponent_Host:import4.RenderComponentType = (null as any);
class _View_AccordionPanelComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _AccordionPanelComponent_0_4:Wrapper_AccordionPanelComponent;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_AccordionPanelComponent_Host0,renderType_AccordionPanelComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('accordion-group',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AccordionPanelComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._AccordionPanelComponent_0_4 = new Wrapper_AccordionPanelComponent(this.parentInjector.get(import8.AccordionComponent));
    this._appEl_0.initComponent(this._AccordionPanelComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._AccordionPanelComponent_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AccordionPanelComponent) && (0 === requestNodeIndex))) { return this._AccordionPanelComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AccordionPanelComponent_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._AccordionPanelComponent_0_4.context.isOpen;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'panel-open',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._AccordionPanelComponent_0_4.context.ngOnDestroy();
  }
}
function viewFactory_AccordionPanelComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_AccordionPanelComponent_Host === (null as any))) { (renderType_AccordionPanelComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_AccordionPanelComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const AccordionPanelComponentNgFactory:import10.ComponentFactory<import0.AccordionPanelComponent> = new import10.ComponentFactory<import0.AccordionPanelComponent>('accordion-group, accordion-panel',viewFactory_AccordionPanelComponent_Host0,import0.AccordionPanelComponent);
const styles_AccordionPanelComponent:any[] = ([] as any[]);
var renderType_AccordionPanelComponent:import4.RenderComponentType = (null as any);
class _View_AccordionPanelComponent0 extends import3.AppView<import0.AccordionPanelComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import11.Wrapper_NgClass;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _anchor_9:any;
  /*private*/ _appEl_9:import5.AppElement;
  _TemplateRef_9_5:any;
  _NgIf_9_6:import12.Wrapper_NgIf;
  _text_10:any;
  _text_11:any;
  _text_12:any;
  _text_13:any;
  _text_14:any;
  _el_15:any;
  _CollapseDirective_15_3:import13.Wrapper_CollapseDirective;
  _text_16:any;
  _el_17:any;
  _text_18:any;
  _text_19:any;
  _text_20:any;
  _text_21:any;
  _text_22:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_AccordionPanelComponent0,renderType_AccordionPanelComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','panel');
    this._NgClass_1_3 = new import11.Wrapper_NgClass(this.parentInjector.get(import14.IterableDiffers),this.parentInjector.get(import15.KeyValueDiffers),new import16.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n      ',(null as any));
    this._el_3 = this.renderer.createElement(this._el_1,'div',(null as any));
    this.renderer.setElementAttribute(this._el_3,'class','panel-heading');
    this._text_4 = this.renderer.createText(this._el_3,'\n        ',(null as any));
    this._el_5 = this.renderer.createElement(this._el_3,'h4',(null as any));
    this.renderer.setElementAttribute(this._el_5,'class','panel-title');
    this._text_6 = this.renderer.createText(this._el_5,'\n          ',(null as any));
    this._el_7 = this.renderer.createElement(this._el_5,'a',(null as any));
    this.renderer.setElementAttribute(this._el_7,'class','accordion-toggle');
    this.renderer.setElementAttribute(this._el_7,'href','');
    this.renderer.setElementAttribute(this._el_7,'tabindex','0');
    this._text_8 = this.renderer.createText(this._el_7,'\n            ',(null as any));
    this._anchor_9 = this.renderer.createTemplateAnchor(this._el_7,(null as any));
    this._appEl_9 = new import5.AppElement(9,7,this,this._anchor_9);
    this._TemplateRef_9_5 = new import17.TemplateRef_(this._appEl_9,viewFactory_AccordionPanelComponent1);
    this._NgIf_9_6 = new import12.Wrapper_NgIf(this._appEl_9.vcRef,this._TemplateRef_9_5);
    this._text_10 = this.renderer.createText(this._el_7,'\n            ',(null as any));
    this.renderer.projectNodes(this._el_7,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_11 = this.renderer.createText(this._el_7,'\n          ',(null as any));
    this._text_12 = this.renderer.createText(this._el_5,'\n        ',(null as any));
    this._text_13 = this.renderer.createText(this._el_3,'\n      ',(null as any));
    this._text_14 = this.renderer.createText(this._el_1,'\n      ',(null as any));
    this._el_15 = this.renderer.createElement(this._el_1,'div',(null as any));
    this.renderer.setElementAttribute(this._el_15,'class','panel-collapse collapse');
    this._CollapseDirective_15_3 = new import13.Wrapper_CollapseDirective(new import16.ElementRef(this._el_15),this.renderer);
    this._text_16 = this.renderer.createText(this._el_15,'\n        ',(null as any));
    this._el_17 = this.renderer.createElement(this._el_15,'div',(null as any));
    this.renderer.setElementAttribute(this._el_17,'class','panel-body');
    this._text_18 = this.renderer.createText(this._el_17,'\n          ',(null as any));
    this.renderer.projectNodes(this._el_17,import2.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this._text_19 = this.renderer.createText(this._el_17,'\n        ',(null as any));
    this._text_20 = this.renderer.createText(this._el_15,'\n      ',(null as any));
    this._text_21 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._text_22 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_3,'click',this.eventHandler(this._handle_click_3_0.bind(this)));
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this.init(([] as any[]),[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._anchor_9,
      this._text_10,
      this._text_11,
      this._text_12,
      this._text_13,
      this._text_14,
      this._el_15,
      this._text_16,
      this._el_17,
      this._text_18,
      this._text_19,
      this._text_20,
      this._text_21,
      this._text_22
    ]
    ,[disposable_0],([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.TemplateRef) && (9 === requestNodeIndex))) { return this._TemplateRef_9_5; }
    if (((token === import18.NgIf) && (9 === requestNodeIndex))) { return this._NgIf_9_6.context; }
    if (((token === import19.CollapseDirective) && ((15 <= requestNodeIndex) && (requestNodeIndex <= 20)))) { return this._CollapseDirective_15_3.context; }
    if (((token === import20.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 21)))) { return this._NgClass_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = 'panel';
    this._NgClass_1_3.check_klass(currVal_0,throwOnChange,false);
    const currVal_1:any = this.context.panelClass;
    this._NgClass_1_3.check_ngClass(currVal_1,throwOnChange,false);
    this._NgClass_1_3.detectChangesInternal(this,this._el_1,throwOnChange);
    const currVal_3:any = this.context.heading;
    this._NgIf_9_6.check_ngIf(currVal_3,throwOnChange,false);
    this._NgIf_9_6.detectChangesInternal(this,this._anchor_9,throwOnChange);
    const currVal_4:boolean = !this.context.isOpen;
    this._CollapseDirective_15_3.check_collapse(currVal_4,throwOnChange,false);
    this._CollapseDirective_15_3.detectChangesInternal(this,this._el_15,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_5:any = this._CollapseDirective_15_3.context.display;
    if (import2.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementStyle(this._el_15,'display',((this.viewUtils.sanitizer.sanitize(import21.SecurityContext.STYLE,currVal_5) == (null as any))? (null as any): this.viewUtils.sanitizer.sanitize(import21.SecurityContext.STYLE,currVal_5).toString()));
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this._CollapseDirective_15_3.context.isExpanded;
    if (import2.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementClass(this._el_15,'in',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this._CollapseDirective_15_3.context.isExpanded;
    if (import2.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementAttribute(this._el_15,'aria-expanded',((currVal_7 == (null as any))? (null as any): currVal_7.toString()));
      this._expr_7 = currVal_7;
    }
    const currVal_8:any = this._CollapseDirective_15_3.context.isCollapsed;
    if (import2.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementAttribute(this._el_15,'aria-hidden',((currVal_8 == (null as any))? (null as any): currVal_8.toString()));
      this._expr_8 = currVal_8;
    }
    const currVal_9:any = this._CollapseDirective_15_3.context.isCollapse;
    if (import2.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementClass(this._el_15,'collapse',currVal_9);
      this._expr_9 = currVal_9;
    }
    const currVal_10:any = this._CollapseDirective_15_3.context.isCollapsing;
    if (import2.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementClass(this._el_15,'collapsing',currVal_10);
      this._expr_10 = currVal_10;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_3_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.toggleOpen($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_AccordionPanelComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.AccordionPanelComponent> {
  if ((renderType_AccordionPanelComponent === (null as any))) { (renderType_AccordionPanelComponent = viewUtils.createRenderComponentType('',2,import9.ViewEncapsulation.None,styles_AccordionPanelComponent,{})); }
  return new _View_AccordionPanelComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_AccordionPanelComponent1 extends import3.AppView<any> {
  _el_0:any;
  _NgClass_0_3:import11.Wrapper_NgClass;
  _text_1:any;
  _map_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_AccordionPanelComponent1,renderType_AccordionPanelComponent,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'span',(null as any));
    this._NgClass_0_3 = new import11.Wrapper_NgClass(this.parent.parentInjector.get(import14.IterableDiffers),this.parent.parentInjector.get(import15.KeyValueDiffers),new import16.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this._map_0 = import2.pureProxy1((p0:any):{[key: string]:any} => {
      return {'text-muted': p0};
    });
    this._expr_1 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import20.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this._map_0(this.parent.context.isDisabled);
    this._NgClass_0_3.check_ngClass(currVal_0,throwOnChange,false);
    this._NgClass_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = import2.interpolate(1,'',this.parent.context.heading,'');
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setText(this._text_1,currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_AccordionPanelComponent1(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_AccordionPanelComponent1(viewUtils,parentInjector,declarationEl);
}
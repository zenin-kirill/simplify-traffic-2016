/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/tooltip/tooltip.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_TooltipDirective {
  context:import0.TooltipDirective;
  changed:boolean;
  /*private*/ _content:any;
  /*private*/ _htmlContent:any;
  /*private*/ _placement:any;
  /*private*/ _isOpen:any;
  /*private*/ _enable:any;
  /*private*/ _animation:any;
  /*private*/ _appendToBody:any;
  /*private*/ _popupClass:any;
  /*private*/ _tooltipContext:any;
  /*private*/ _delay:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this._content = import1.UNINITIALIZED;
    this._htmlContent = import1.UNINITIALIZED;
    this._placement = import1.UNINITIALIZED;
    this._isOpen = import1.UNINITIALIZED;
    this._enable = import1.UNINITIALIZED;
    this._animation = import1.UNINITIALIZED;
    this._appendToBody = import1.UNINITIALIZED;
    this._popupClass = import1.UNINITIALIZED;
    this._tooltipContext = import1.UNINITIALIZED;
    this._delay = import1.UNINITIALIZED;
    this.context = new import0.TooltipDirective(p0,p1,p2);
  }
  check_content(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._content,currValue))) {
      this.changed = true;
      this.context.content = currValue;
      this._content = currValue;
    }
  }
  check_htmlContent(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._htmlContent,currValue))) {
      this.changed = true;
      this.context.htmlContent = currValue;
      this._htmlContent = currValue;
    }
  }
  check_placement(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._placement,currValue))) {
      this.changed = true;
      this.context.placement = currValue;
      this._placement = currValue;
    }
  }
  check_isOpen(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._isOpen,currValue))) {
      this.changed = true;
      this.context.isOpen = currValue;
      this._isOpen = currValue;
    }
  }
  check_enable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._enable,currValue))) {
      this.changed = true;
      this.context.enable = currValue;
      this._enable = currValue;
    }
  }
  check_animation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._animation,currValue))) {
      this.changed = true;
      this.context.animation = currValue;
      this._animation = currValue;
    }
  }
  check_appendToBody(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._appendToBody,currValue))) {
      this.changed = true;
      this.context.appendToBody = currValue;
      this._appendToBody = currValue;
    }
  }
  check_popupClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._popupClass,currValue))) {
      this.changed = true;
      this.context.popupClass = currValue;
      this._popupClass = currValue;
    }
  }
  check_tooltipContext(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._tooltipContext,currValue))) {
      this.changed = true;
      this.context.tooltipContext = currValue;
      this._tooltipContext = currValue;
    }
  }
  check_delay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._delay,currValue))) {
      this.changed = true;
      this.context.delay = currValue;
      this._delay = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
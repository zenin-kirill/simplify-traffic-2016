/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/typeahead/typeahead.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_TypeaheadDirective {
  context:import0.TypeaheadDirective;
  changed:boolean;
  /*private*/ _typeahead:any;
  /*private*/ _typeaheadMinLength:any;
  /*private*/ _typeaheadWaitMs:any;
  /*private*/ _typeaheadOptionsLimit:any;
  /*private*/ _typeaheadOptionField:any;
  /*private*/ _typeaheadGroupField:any;
  /*private*/ _typeaheadAsync:any;
  /*private*/ _typeaheadLatinize:any;
  /*private*/ _typeaheadSingleWords:any;
  /*private*/ _typeaheadWordDelimiters:any;
  /*private*/ _typeaheadPhraseDelimiters:any;
  /*private*/ _typeaheadItemTemplate:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this.changed = false;
    this._typeahead = import1.UNINITIALIZED;
    this._typeaheadMinLength = import1.UNINITIALIZED;
    this._typeaheadWaitMs = import1.UNINITIALIZED;
    this._typeaheadOptionsLimit = import1.UNINITIALIZED;
    this._typeaheadOptionField = import1.UNINITIALIZED;
    this._typeaheadGroupField = import1.UNINITIALIZED;
    this._typeaheadAsync = import1.UNINITIALIZED;
    this._typeaheadLatinize = import1.UNINITIALIZED;
    this._typeaheadSingleWords = import1.UNINITIALIZED;
    this._typeaheadWordDelimiters = import1.UNINITIALIZED;
    this._typeaheadPhraseDelimiters = import1.UNINITIALIZED;
    this._typeaheadItemTemplate = import1.UNINITIALIZED;
    this.context = new import0.TypeaheadDirective(p0,p1,p2,p3,p4);
  }
  check_typeahead(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeahead,currValue))) {
      this.changed = true;
      this.context.typeahead = currValue;
      this._typeahead = currValue;
    }
  }
  check_typeaheadMinLength(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadMinLength,currValue))) {
      this.changed = true;
      this.context.typeaheadMinLength = currValue;
      this._typeaheadMinLength = currValue;
    }
  }
  check_typeaheadWaitMs(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadWaitMs,currValue))) {
      this.changed = true;
      this.context.typeaheadWaitMs = currValue;
      this._typeaheadWaitMs = currValue;
    }
  }
  check_typeaheadOptionsLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadOptionsLimit,currValue))) {
      this.changed = true;
      this.context.typeaheadOptionsLimit = currValue;
      this._typeaheadOptionsLimit = currValue;
    }
  }
  check_typeaheadOptionField(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadOptionField,currValue))) {
      this.changed = true;
      this.context.typeaheadOptionField = currValue;
      this._typeaheadOptionField = currValue;
    }
  }
  check_typeaheadGroupField(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadGroupField,currValue))) {
      this.changed = true;
      this.context.typeaheadGroupField = currValue;
      this._typeaheadGroupField = currValue;
    }
  }
  check_typeaheadAsync(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadAsync,currValue))) {
      this.changed = true;
      this.context.typeaheadAsync = currValue;
      this._typeaheadAsync = currValue;
    }
  }
  check_typeaheadLatinize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadLatinize,currValue))) {
      this.changed = true;
      this.context.typeaheadLatinize = currValue;
      this._typeaheadLatinize = currValue;
    }
  }
  check_typeaheadSingleWords(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadSingleWords,currValue))) {
      this.changed = true;
      this.context.typeaheadSingleWords = currValue;
      this._typeaheadSingleWords = currValue;
    }
  }
  check_typeaheadWordDelimiters(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadWordDelimiters,currValue))) {
      this.changed = true;
      this.context.typeaheadWordDelimiters = currValue;
      this._typeaheadWordDelimiters = currValue;
    }
  }
  check_typeaheadPhraseDelimiters(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadPhraseDelimiters,currValue))) {
      this.changed = true;
      this.context.typeaheadPhraseDelimiters = currValue;
      this._typeaheadPhraseDelimiters = currValue;
    }
  }
  check_typeaheadItemTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._typeaheadItemTemplate,currValue))) {
      this.changed = true;
      this.context.typeaheadItemTemplate = currValue;
      this._typeaheadItemTemplate = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/tabs/tab.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_TabDirective {
  context:import0.TabDirective;
  changed:boolean;
  /*private*/ _heading:any;
  /*private*/ _disabled:any;
  /*private*/ _removable:any;
  /*private*/ _customClass:any;
  /*private*/ _active:any;
  constructor(p0:any) {
    this.changed = false;
    this._heading = import1.UNINITIALIZED;
    this._disabled = import1.UNINITIALIZED;
    this._removable = import1.UNINITIALIZED;
    this._customClass = import1.UNINITIALIZED;
    this._active = import1.UNINITIALIZED;
    this.context = new import0.TabDirective(p0);
  }
  check_heading(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._heading,currValue))) {
      this.changed = true;
      this.context.heading = currValue;
      this._heading = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._disabled,currValue))) {
      this.changed = true;
      this.context.disabled = currValue;
      this._disabled = currValue;
    }
  }
  check_removable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._removable,currValue))) {
      this.changed = true;
      this.context.removable = currValue;
      this._removable = currValue;
    }
  }
  check_customClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._customClass,currValue))) {
      this.changed = true;
      this.context.customClass = currValue;
      this._customClass = currValue;
    }
  }
  check_active(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._active,currValue))) {
      this.changed = true;
      this.context.active = currValue;
      this._active = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}